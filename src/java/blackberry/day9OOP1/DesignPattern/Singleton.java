package blackberry.day9OOP1.DesignPattern;

/**
 * @Description: 单例设计模式
 * @author: bberzhou@gmail.com
 * @date: 4/23/20 15:04
 * Create By IntelliJ IDEA
 */
public class Singleton {
    /*
        什么叫设计模式？
        设计模式是在大量的实践中总结和理论化之后优选的代码结构、编程风格、以及解决问题的思考方式。

        设计模式可以分为（总计23种）：
            创建型模式：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式（共5种）
            结构型模式：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式（共7种）
            行为型模式：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式

        什么是单例设计模式？
            类的单例设计模式，就是采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例


            并且该类只提供一个取得其对象实例的方法。如果要让类在一个虚拟机中只能产生一个对象，
            我们首先必须将类的构造器的访问权限设置为private，这样就不能用new操作符在类的外部产生类的对象
            但在类内部仍可以产生该类的对象。因为在类的外部开始还无法得到类的对象，
            只能调用该类的某个静态方法以返回类内部创建的对象，静态方法只能访问类中的静态成员变量，所以，
            指向类内部产生的该类对象的变量也必须定义成静态的。


        单例模式的优点：由于单例模式只生成一个实例，减少了系统性能开销，当一个对象的产生需要比较多的资源时，
                     如读取配置、产生其他依赖对象时，则可以通过在应用启动时直接产生一个单例对象，然后永久驻留内存的方式来解决
                     比如java.lang.Runtime

        单例模式的应用：网站的计数器，应用程序的日志应用，数据库连接池，读取配置文件的类

     */

}
